#!/bin/bash
# ---------------------------------------------------------------
# SSHFS ressource mounting script
#
# Environment is given as $1
# It's configuration is stored under $HOME/.config/sshfs-$1.conf
# ---------------------------------------------------------------

# parameter
SSHFS_NAME="$1"

# configuration file
[ "${SSHFS_NAME}" = "" ] && { zenity --error --text="Resource name parameter missing"; exit 1; }
SSHFS_CONFIG="$HOME/.config/sshfs-${SSHFS_NAME}.conf"
[ ! -f "${SSHFS_CONFIG}" ] && { zenity --error --text="${SSHFS_CONFIG} doesn't exist"; exit 1; }

# check tools availability
command -v nmap >/dev/null 2>&1 || { zenity --error --text="Please install nmap"; exit 1; }
command -v sshfs >/dev/null 2>&1 || { zenity --error --text="Please install sshfs"; exit 1; }

# retreive SSHFS configuration
SSHFS_LABEL=$(grep "^label=" "${SSHFS_CONFIG}" | cut -d'=' -f2 | tr -d "\n\r")
SSHFS_ACCOUNT=$(grep "^account=" "${SSHFS_CONFIG}" | cut -d'=' -f2 | tr -d "\n\r")
FILE_MANAGER=$(grep "^file-manager=" "${SSHFS_CONFIG}" | cut -d'=' -f2 | tr -d "\n\r")
MOUNT_POINT=$(grep "^mount-point=" "${SSHFS_CONFIG}" | cut -d'=' -f2 | tr -d "\n\r")

# generate temporary directory
TMP_DIR=$(mktemp -t -d "sshfs-XXXXXXXX")
TMP_FLAG="${TMP_DIR}/mount.flg"

(

# test server
echo 10
echo "# Initialisation ..."

# get uid and gui
USER_UID=$(id -u)
USER_GID=$(id -g)

# setup mount point
MOUNT_POINT="$HOME/${MOUNT_POINT}"
[ ! -d "${MOUNT_POINT}" ] && mkdir --parents "${MOUNT_POINT}"

# loop to mount ressource
INDEX=1
SERVER_INDEX=0
while [ ${INDEX} -gt 0 -a ${SERVER_INDEX} -eq 0 ]
do
	# read server config
	SERVER_LABEL=$(grep "^${INDEX}-label=" "${SSHFS_CONFIG}" | cut -d'=' -f2 | tr -d "\n\r")
	SERVER_ADDRESS=$(grep "^${INDEX}-address=" "${SSHFS_CONFIG}" | cut -d'=' -f2 | tr -d "\n\r")
	SERVER_PORT=$(grep "^${INDEX}-port=" "${SSHFS_CONFIG}" | cut -d'=' -f2 | tr -d "\n\r")
	SERVER_PROTOCOL=$(grep "^${INDEX}-protocol=" "${SSHFS_CONFIG}" | cut -d'=' -f2 | tr -d "\n\r")

	# if server address is defined, test server
	if [ "${SERVER_ADDRESS}" != "" ]
	then
		# display
		echo $((INDEX * 10 + 10))
		echo "# ${SERVER_LABEL} - Checking connectivity ..."

		# test server connectivity
		SERVER_REACHED=$(nmap --max-retries 1 --host-timeout 5 -p${SERVER_PORT} "${SERVER_ADDRESS}" 2>/dev/null | grep "open")
		[ "${SERVER_PROTOCOL}" != "" ] && SERVER_REACHED=$(echo "${SERVER_REACHED}" | grep "${SERVER_PROTOCOL}")

		# if server reached, end of quest
		if [ "${SERVER_REACHED}" != "" ]
		then
			# display
			echo $((INDEX * 10 + 15))
			echo "# ${SERVER_LABEL} - Reachable"
			SERVER_INDEX=${INDEX}
			INDEX=0

		# else try next server
		else
			# display
			echo  $((INDEX * 10 + 15))
			echo "# ${SERVER_LABEL} - Not reachable"
			INDEX=$((INDEX + 1))
		fi
	# else
	else
		# end of quest
		INDEX=0
	fi
done

# if server is accessible
if [ ${SERVER_INDEX} -gt 0 ]
then
	# unmount ressource if any
	echo 80
	echo "# ${SERVER_LABEL} - Preparation of ${MOUNT_POINT} ..."
	fusermount -uz "${MOUNT_POINT}"

	# mount ressource
	echo 90
	echo "# ${SERVER_LABEL} - Connection ..."
	sshfs -o "reconnect,uid=${USER_UID},gid=${USER_GID}" "${SSHFS_NAME}_${SERVER_INDEX}:" "${MOUNT_POINT}"

	# check ressource
	SERVER_REACHED=$(mount | grep "sshfs" | grep "${MOUNT_POINT}") 
fi

# if ressource has been mounted
[ ${SERVER_INDEX} -gt 0 ] && echo "ok" > "${TMP_FLAG}" || echo "ko" > "${TMP_FLAG}"

# finished
echo 100

) | zenity --no-cancel --progress --auto-close --width 300 --title "Connection to ${SSHFS_LABEL}"

RESULT=$(cat "${TMP_FLAG}")
if [ "${RESULT}" = "ok" ]
then
	# sucess notification
	TEXT="${SSHFS_LABEL} is now accessible thru ${SERVER_LABEL}."
	TITLE="${SSHFS_LABEL} mounted"
	ICON=$(grep "^icon=" "${SSHFS_CONFIG}" | cut -d'=' -f2)

# else, ressource can't be mounted
else
	# failure notification
	TEXT="${SSHFS_LABEL} could not be mounted.\nCheck your network connection."
	TITLE="No Connection"
	ICON="stop"
fi

# final notification
notify-send --icon="${ICON}" --expire-time=5000 "${TITLE}" "${TEXT}"

# open file manager windows on the mount point
[ "${RESULT}" = "ok" ] && "${FILE_MANAGER}" "${MOUNT_POINT}" &

# remove temporary directory
rm -r "${TMP_DIR}"
