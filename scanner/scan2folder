#!/usr/bin/env bash
# -----------------------------------------------------
# Utility to Scan documents from HP AIO printer/scanner
#
# Depends on :
#  * scanimage
#  * imagemagick (for mogrify)
#  * ghostscript (for gs)
#  * yad
#
# Revision history :
#  08/02/2013, v1.0 - Creation by N. Bernaerts
#  27/09/2014, v2.0 - Rework & multi scanner support
#  24/01/2015, v2.1 - Check tools availability
#  26/02/2016, v2.2 - Move config to ~/.config and add auto adjust level
#  28/02/2016, v2.3 - Select page size and generate multi-pages PDF (thanks to Kevin McArdle idea)
#  05/06/2017, v2.4 - Code cleanup
#  06/06/2020, v2.5 - Conversion of lists to arrays
#  20/06/2020, v2.6 - Shortcut if only one scanner is detected
#  09/07/2024, v2.7 - Compatibility with Ubuntu 24.04
# ----------------------------------------------------

# check tools availability
command -v scanimage >/dev/null 2>&1 || { zenity --error --text="Please install scanimage"; exit 1; }
command -v mogrify >/dev/null 2>&1 || { zenity --error --text="Please install mogrify [imagemagick package]"; exit 1; }
command -v gs >/dev/null 2>&1 || { zenity --error --text="Please install gs [ghostscript package]"; exit 1; }
command -v yad >/dev/null 2>&1 || { zenity --error --text="Please install yad"; exit 1; }

# define and check configuration file
CONF_FILE="$HOME/.config/scan2folder.conf"
[ -f "${CONF_FILE}" ] || { zenity --error --text="Please create and configure ${CONF_FILE}"; exit 1; }

# generate temporary files and directory
TMP_DIR=$(mktemp -t -d "scan-XXXXXXXX")
TMP_LIST="${TMP_DIR}/list.txt"
TMP_CONF="${TMP_DIR}/file.conf"

# default dialog box width
DLG_WIDTH=600

# set choice possibilities
CHOICE_SCAN=0
CHOICE_EXIT=1
CHOICE_SAVE=2
CHOICE_DEVICE=3
CHOICE_PARAM=4

# ------------------------
#      Load config
# ------------------------

SCAN_NAME=$(cat "${CONF_FILE}" | grep "scanner-name=" | cut -d"=" -f2-)
SCAN_DEVICE=$(cat "${CONF_FILE}" | grep "scanner-device=" | cut -d"=" -f2-)

ARR_FORMAT=( $(cat "${CONF_FILE}" | grep "list-format=" | cut -d"=" -f2- | tr ',' '\n') )
ARR_PAGE=( $(cat "${CONF_FILE}" | grep "list-page=" | cut -d"=" -f2- | tr -d ' ' | tr ',' '\n') )
ARR_DPI=( $(cat "${CONF_FILE}" | grep "list-dpi=" | cut -d"=" -f2- | tr ',' '\n') )
ARR_MODE=( $(cat "${CONF_FILE}" | grep "list-mode=" | cut -d"=" -f2- | tr ',' '\n') )
ARR_SOURCE=( $(cat "${CONF_FILE}" | grep "list-source=" | cut -d"=" -f2- | tr ',' '\n') )

PAGE=$(cat "${CONF_FILE}" | grep "default-page=" | cut -d"=" -f2)
DPI=$(cat "${CONF_FILE}" | grep "default-dpi=" | cut -d"=" -f2)
MODE=$(cat "${CONF_FILE}" | grep "default-mode=" | cut -d"=" -f2)
SOURCE=$(cat "${CONF_FILE}" | grep "default-source=" | cut -d"=" -f2)
FORMAT=$(cat "${CONF_FILE}" | grep "default-format=" | cut -d"=" -f2)
DIRECTORY=$(cat "${CONF_FILE}" | grep "default-dir=" | cut -d"=" -f2-)

# if no scanner selected, force device scanning
[ "${SCAN_DEVICE}" = "" ] && CHOICE="${CHOICE_DEVICE}" || CHOICE="${CHOICE_PARAM}"

# ------------------------
#         Main loop
# ------------------------

while [ "${CHOICE}" != "${CHOICE_EXIT}" ]
do case ${CHOICE} in

  # ---------------------
  #     Scan pages
  # ---------------------
  ${CHOICE_SCAN})

    # scanning documents : parameters
    ARR_DIALOG=( "--center" "--width=${DLG_WIDTH}" "--window-icon=scanner" "--image=scanner" "--no-buttons" )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--progress-text" "Scanning documents ..." )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--progress" "--pulsate" "--auto-close" "--undecorated" )
  
    (
    # beginning
    echo 0
  
    # generate timestamped filename
    FILE=$(date '+Scan-%Y%b%d-%Hh%Mm%Ss')

    # display scan message
    echo "# Scanning document from ${SOURCE} (${DPI} dpi) ..."
    
    # parameters
    ARR_PARAM=( "--device-name=${SCAN_DEVICE}" "--format=pnm"  "--batch=${TMP_DIR}/${FILE}-%d.pnm" )
    ARR_PARAM=( "${ARR_PARAM[@]}" "--mode=${MODE}" "--resolution=${DPI}" "--source" "${SOURCE}" )
    [ "${SOURCE}" = "Flatbed" ] && ARR_PARAM=( "${ARR_PARAM[@]}" "--batch-count" "1" )

    # scan image with needed resolution
    NUMBER=$(scanimage "${ARR_PARAM[@]}" 2>&1 | grep "terminated" | cut -d',' -f2 | xargs | cut -d' ' -f1)

    # display conversion message
    echo "# Converting ${NUMBER} document(s) ..."

    # calculate default size according to page type
    WIDTH_MM=$(echo ${ARR_PAGE[@]} | tr ' ' '\n' | grep "^${PAGE}" | cut -d'(' -f2 | cut -d'x' -f1)
    HEIGHT_MM=$(echo ${ARR_PAGE[@]} | tr ' ' '\n' | grep "^${PAGE}" | cut -d'x' -f2 | cut -d')' -f1)
    WIDTH_PIX=$((10*${WIDTH_MM}*${DPI}/254))
    HEIGHT_PIX=$((10*${HEIGHT_MM}*${DPI}/254))

    # auto adjust levels and crop picture to target page size
    mogrify -crop "${WIDTH_PIX}x${HEIGHT_PIX}+0+0" -auto-level ${TMP_DIR}/${FILE}*.pnm

    # convert to proper format
    mogrify -format "${FORMAT}" -page "${PAGE}" ${TMP_DIR}/${FILE}*.pnm
    
    # if needed, merge all scanned documents in a single PDF file
    if [ "${FORMAT}" = "pdf" ]
    then
      # parameters
      ARR_PARAM=( "-q" "-dNOPAUSE" "-dBATCH" "-dSAFER" "-sPAPERSIZE=${PAGE}" "-dPDFFitPage" "-dCompatibilityLevel=1.4" )
      ARR_PARAM=( "${ARR_PARAM[@]}" "-sDEVICE=pdfwrite" "-sOutputFile=${DIRECTORY}/${FILE}.pdf" )

      # array of PDF files
      ARR_PDF=( $(ls ${TMP_DIR}/${FILE}*.pdf) )

      # generate resulting PDF
      gs "${ARR_PARAM[@]}" "${ARR_PDF[@]}"
    else
        # move documents
    	mv ${TMP_DIR}/${FILE}*.${FORMAT} ${DIRECTORY} 
    fi

    # end
    echo 100
    ) | yad "${ARR_DIALOG[@]}"

    # back to parameter dialog box
    CHOICE="${CHOICE_PARAM}"
    ;;

  # -------------------------
  #     Save parameters
  # -------------------------
  
  ${CHOICE_SAVE})
    # convert arrays to lists
    LIST_FORMAT=$(echo "${ARR_FORMAT[@]}" | xargs | tr ' ' ',')
    LIST_PAGE=$(echo "${ARR_PAGE[@]}" | xargs | tr ' ' ',')
    LIST_DPI=$(echo "${ARR_DPI[@]}" | xargs | tr ' ' ',')
    LIST_MODE=$(echo "${ARR_MODE[@]}" | xargs | tr ' ' ',')
    LIST_SOURCE=$(echo "${ARR_SOURCE[@]}" | xargs | tr ' ' ',')
  
    # save configuration
    echo "[scanner]" > ${CONF_FILE}
    echo "scanner-name=${SCAN_NAME}" >> ${CONF_FILE}
    echo "scanner-device=${SCAN_DEVICE}" >> ${CONF_FILE}

    echo "[list]" >> ${CONF_FILE}
    echo "list-format=${LIST_FORMAT}" >> ${CONF_FILE}
    echo "list-page=${LIST_PAGE}" >> ${CONF_FILE}
    echo "list-dpi=${LIST_DPI}" >> ${CONF_FILE}
    echo "list-mode=${LIST_MODE}" >> ${CONF_FILE}
    echo "list-source=${LIST_SOURCE}" >> ${CONF_FILE}

    echo "[default]" >> ${CONF_FILE}
    echo "default-page=${PAGE}" >> ${CONF_FILE}
    echo "default-dpi=${DPI}" >> ${CONF_FILE}
    echo "default-mode=${MODE}" >> ${CONF_FILE}
    echo "default-source=${SOURCE}" >> ${CONF_FILE}
    echo "default-format=${FORMAT}" >> ${CONF_FILE}
    echo "default-dir=${DIRECTORY}" >> ${CONF_FILE}

    # back to parameter dialog box
    CHOICE=${CHOICE_PARAM}
    ;;

  # ------------------------
  #      Select scanner
  # ------------------------
  
  ${CHOICE_DEVICE})
  
    # init
    SELECTION=""
  
    # scanner available dialog : parameters
    ARR_DIALOG=( "--width=${DLG_WIDTH}" "--window-icon=scanner" "--image=scanner" "--no-buttons" )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--progress-text" "Looking for scanners ..." )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--center" "--progress" "--pulsate" "--auto-close" "--undecorated" )

    # scanner available dialog : display
    (
    echo 0
    scanimage --formatted-device-list="%i|%d|%m%n" > "${TMP_LIST}"
    echo 100
    ) | yad "${ARR_DIALOG[@]}"

    # generate scanner list
    NBR_DEVICE=$(cat "${TMP_LIST}" | wc -l)

    # if more than one scanner has been detected
    if [ ${NBR_DEVICE} -gt 1 ]
    then
      # scanner selection dialog : parameters
      ARR_DIALOG=( "--center" "--width=${DLG_WIDTH}" "--height=250" "--window-icon=scanner" "--image=scanner" )
      ARR_DIALOG=( "${ARR_DIALOG[@]}" "--text=\nPlease, select scanner to use\n" "--list" "--no-headers" )
      ARR_DIALOG=( "${ARR_DIALOG[@]}" "--column=Index" "--column=Scanner" "--hide-column=1" "--undecorated" )

      # scanner selection dialog : list of scanner
      ARR_SCANNER=( $(cat "${TMP_LIST}" | cut -d'|' -f1,3 | tr ' ' '_' | tr '|' ' ' | xargs) )

      # scanner selection dialog : display
      SELECTION=$(yad "${ARR_DIALOG[@]}" "${ARR_SCANNER[@]}")

    # else, if one scanner has been detected
    elif [ ${#ARR_DEVICE[@]} -eq 1 ]
    then
      SELECTION="${ARR_DEVICE[0]}" 
    fi

    # if one scanner has been detected and selected
    if [ "${SELECTION}" != "" ]
    then
      # retrieve selected scanner
      SCAN_INDEX=$(echo "${SELECTION}" | cut -d'|' -f1)
      SCAN_INDEX=$((SCAN_INDEX + 1))
      SCAN_LINE=$(sed -n ${SCAN_INDEX}p "${TMP_LIST}")
      SCAN_DEVICE=$(echo "${SCAN_LINE}" | cut -d'|' -f2)
      SCAN_NAME=$(echo "${SCAN_LINE}" | cut -d'|' -f3)
      
      # scanner possibilities dialog : parameters
      ARR_DIALOG=( "--center" "--width=${DLG_WIDTH}" "--window-icon=scanner" "--image=scanner" "--no-buttons" )
      ARR_DIALOG=( "${ARR_DIALOG[@]}" "--progress-text" "Retrieving scanner capabilities ..." )
      ARR_DIALOG=( "${ARR_DIALOG[@]}" "--progress" "--pulsate" "--auto-close" "--undecorated" )
      
      # scanner possibilities dialog : display
      (
      echo 0
      scanimage --all-options --device-name "${SCAN_DEVICE}" > "${TMP_CONF}"
      echo 100
      ) | yad "${ARR_DIALOG[@]}"

      # retreive parameters list
      ARR_DPI=( $(cat "${TMP_CONF}" | grep "\-\-resolution" | xargs | cut -d' ' -f2 | sed 's/[^0-9|]*//g' | tr '|' '\n') )
      ARR_MODE=( $(cat "${TMP_CONF}" | grep "\-\-mode" | xargs | cut -d' ' -f2 | tr '|' '\n') )
      ARR_SOURCE=( $(cat "${TMP_CONF}" | grep "\-\-source" | xargs | cut -d' ' -f2 | tr '|' '\n') )

      # retreive default values
      DPI=$(cat "${TMP_CONF}" | grep "\-\-resolution" | cut -d'[' -f2 | cut -d']' -f1)
      MODE=$(cat "${TMP_CONF}" | grep "\-\-mode" | cut -d'[' -f2 | cut -d']' -f1)
      SOURCE=$(cat "${TMP_CONF}" | grep "\-\-source" | cut -d'[' -f2 | cut -d']' -f1)
    fi

    # back to parameter dialog box
    CHOICE="${CHOICE_PARAM}"
    ;;

  # -------------------------------
  #     Select scan parameters
  # -------------------------------
  
  ${CHOICE_PARAM})
  
    # prepare dialog box combo lists
    #   -> place default choice as top of the list
    DLG_DPI=$(echo "${DPI},$(echo "${ARR_DPI[@]}" | tr ' ' '\n' | grep -v "^${DPI}$" | xargs | tr ' ' ',')")
    DLG_MODE=$(echo "${MODE},$(echo "${ARR_MODE[@]}" | tr ' ' '\n' | grep -v "^${MODE}$" | xargs | tr ' ' ',')")
    DLG_SOURCE=$(echo "${SOURCE},$(echo "${ARR_SOURCE[@]}" | tr ' ' '\n' | grep -v "^${SOURCE}$" | xargs | tr ' ' ',')")
    DLG_FORMAT=$(echo "${FORMAT},$(echo "${ARR_FORMAT[@]}" | tr ' ' '\n' | grep -v "^${FORMAT}$" | xargs | tr ' ' ',')")
    DLG_PAGE=$(echo "${PAGE},$(echo "${ARR_PAGE[@]}" | tr ' ' '\n' | grep -v "^${PAGE}" | cut -d'(' -f1 | xargs | tr ' ' ',')")

    # scan parameters dialog : parameters
    ARR_DIALOG=( "--center" "--width=${DLG_WIDTH}" "--window-icon=scanner" "--image=scanner" )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--title=Scan direct" "--text=\n${SCAN_NAME}\n" )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--button=Device:${CHOICE_DEVICE}" "--button=Save:${CHOICE_SAVE}" )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--button=Close:${CHOICE_EXIT}" "--button=Scan:${CHOICE_SCAN}" )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--form" "--item-separator=," )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--field=Resolution:CB" "${DLG_DPI}" "--field=Mode:CB" "${DLG_MODE}" )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--field=Source:CB" "${DLG_SOURCE}" "--field=Format:CB" "${DLG_FORMAT}" )
    ARR_DIALOG=( "${ARR_DIALOG[@]}" "--field=Page size:CB" "${DLG_PAGE}" "--field=Location:DIR" "${DIRECTORY}" )

    # scan parameters dialog : display
    SELECTION=$(yad "${ARR_DIALOG[@]}")
    CHOICE=$?

    # if needed, update parameters from dialog box selection
    if [ "${SELECTION}" != "" ]
    then
      DPI=$(echo "${SELECTION}" | cut -d"|" -f1)
      MODE=$(echo "${SELECTION}" | cut -d"|" -f2)
      SOURCE=$(echo "${SELECTION}" | cut -d"|" -f3)
      FORMAT=$(echo "${SELECTION}" | cut -d"|" -f4)
      PAGE=$(echo "${SELECTION}" | cut -d"|" -f5)
      DIRECTORY=$(echo "${SELECTION}" | cut -d"|" -f6)
    fi
    ;;

  # ---------------------------
  #     Unexpected choice
  # ---------------------------
  *)
    # by default, exit
    CHOICE="${CHOICE_EXIT}"
    ;;
  esac
done

# remove temporary directory
rm -r "${TMP_DIR}"
